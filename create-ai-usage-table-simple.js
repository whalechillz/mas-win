require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// 환경 변수에서 Supabase 정보 가져오기
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Supabase 환경 변수가 설정되지 않았습니다');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '설정됨' : '설정되지 않음');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '설정됨' : '설정되지 않음');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createAITable() {
  try {
    console.log('🗄️ AI 사용량 테이블 생성 시작...');

    // 테이블이 이미 존재하는지 확인
    const { data: existingTables, error: checkError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'ai_usage_logs');

    if (checkError) {
      console.log('⚠️ 테이블 확인 중 오류 (정상일 수 있음):', checkError.message);
    }

    if (existingTables && existingTables.length > 0) {
      console.log('✅ AI 사용량 테이블이 이미 존재합니다.');
      return;
    }

    // 테이블 생성 SQL
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS public.ai_usage_logs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        api_endpoint TEXT NOT NULL,
        model TEXT NOT NULL,
        input_tokens INTEGER DEFAULT 0,
        output_tokens INTEGER DEFAULT 0,
        total_tokens INTEGER DEFAULT 0,
        cost DECIMAL(10, 6) DEFAULT 0,
        improvement_type TEXT,
        content_type TEXT,
        user_agent TEXT,
        ip_address INET,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // SQL 실행을 위해 직접 쿼리 실행
    const { error: createError } = await supabase
      .rpc('exec', { sql: createTableSQL });

    if (createError) {
      console.error('❌ 테이블 생성 에러:', createError);
      
      // 대안: 직접 INSERT로 테이블 구조 확인
      console.log('🔄 대안 방법으로 테이블 존재 여부 확인...');
      
      try {
        const { error: testError } = await supabase
          .from('ai_usage_logs')
          .select('id')
          .limit(1);
        
        if (!testError) {
          console.log('✅ AI 사용량 테이블이 이미 존재합니다.');
          return;
        } else {
          console.log('❌ 테이블이 존재하지 않습니다. 수동으로 생성해야 합니다.');
          console.log('📋 다음 SQL을 Supabase 대시보드에서 실행하세요:');
          console.log(createTableSQL);
        }
      } catch (testError) {
        console.log('❌ 테이블 접근 테스트 실패:', testError.message);
      }
    } else {
      console.log('✅ AI 사용량 테이블이 성공적으로 생성되었습니다.');
    }

    // 인덱스 생성
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_endpoint ON public.ai_usage_logs (api_endpoint);',
      'CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_model ON public.ai_usage_logs (model);',
      'CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_created_at ON public.ai_usage_logs (created_at DESC);',
      'CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_cost ON public.ai_usage_logs (cost DESC);'
    ];

    for (const indexSQL of indexes) {
      try {
        const { error: indexError } = await supabase.rpc('exec', { sql: indexSQL });
        if (indexError) {
          console.log('⚠️ 인덱스 생성 경고:', indexError.message);
        } else {
          console.log('✅ 인덱스 생성 완료');
        }
      } catch (indexError) {
        console.log('⚠️ 인덱스 생성 중 오류:', indexError.message);
      }
    }

    // RLS 정책 설정
    const policies = [
      'ALTER TABLE public.ai_usage_logs ENABLE ROW LEVEL SECURITY;',
      'CREATE POLICY IF NOT EXISTS "Enable read access for all users" ON public.ai_usage_logs FOR SELECT USING (TRUE);',
      'CREATE POLICY IF NOT EXISTS "Enable insert access for service role" ON public.ai_usage_logs FOR INSERT WITH CHECK (TRUE);'
    ];

    for (const policySQL of policies) {
      try {
        const { error: policyError } = await supabase.rpc('exec', { sql: policySQL });
        if (policyError) {
          console.log('⚠️ 정책 설정 경고:', policyError.message);
        } else {
          console.log('✅ 정책 설정 완료');
        }
      } catch (policyError) {
        console.log('⚠️ 정책 설정 중 오류:', policyError.message);
      }
    }

  } catch (error) {
    console.error('❌ 테이블 생성 중 오류 발생:', error);
  }
}

// 스크립트 실행
createAITable().then(() => {
  console.log('🏁 AI 사용량 테이블 생성 스크립트 완료');
  process.exit(0);
}).catch((error) => {
  console.error('❌ 스크립트 실행 중 오류:', error);
  process.exit(1);
});
