require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testAITable() {
  try {
    console.log('🧪 AI 사용량 테이블 테스트 시작...');

    // 테이블에 데이터 삽입 시도
    const testData = {
      api_endpoint: 'improve-blog-content',
      model: 'gpt-4o-mini-2024-07-18',
      input_tokens: 100,
      output_tokens: 200,
      total_tokens: 300,
      cost: 0.001,
      improvement_type: 'all',
      content_type: '골프 정보',
      user_agent: 'test',
      ip_address: '127.0.0.1'
    };

    const { data, error } = await supabase
      .from('ai_usage_logs')
      .insert([testData]);

    if (error) {
      console.log('❌ 테이블이 존재하지 않거나 접근할 수 없습니다:', error);
      
      if (error.message && error.message.includes('relation "public.ai_usage_logs" does not exist')) {
        console.log('📋 다음 SQL을 Supabase 대시보드의 SQL Editor에서 실행하세요:');
        console.log(`
CREATE TABLE IF NOT EXISTS public.ai_usage_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  api_endpoint TEXT NOT NULL,
  model TEXT NOT NULL,
  input_tokens INTEGER DEFAULT 0,
  output_tokens INTEGER DEFAULT 0,
  total_tokens INTEGER DEFAULT 0,
  cost DECIMAL(10, 6) DEFAULT 0,
  improvement_type TEXT,
  content_type TEXT,
  user_agent TEXT,
  ip_address INET,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_endpoint ON public.ai_usage_logs (api_endpoint);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_model ON public.ai_usage_logs (model);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_created_at ON public.ai_usage_logs (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_cost ON public.ai_usage_logs (cost DESC);

-- RLS 정책 설정
ALTER TABLE public.ai_usage_logs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON public.ai_usage_logs
  FOR SELECT USING (TRUE);

CREATE POLICY "Enable insert access for service role" ON public.ai_usage_logs
  FOR INSERT WITH CHECK (TRUE);
        `);
      }
    } else {
      console.log('✅ 테이블이 존재하고 데이터 삽입이 성공했습니다!');
      console.log('📊 삽입된 데이터:', data);
      
      // 테스트 데이터 삭제
      const { error: deleteError } = await supabase
        .from('ai_usage_logs')
        .delete()
        .eq('api_endpoint', 'improve-blog-content')
        .eq('model', 'gpt-4o-mini-2024-07-18')
        .eq('user_agent', 'test');
      
      if (deleteError) {
        console.log('⚠️ 테스트 데이터 삭제 실패:', deleteError.message);
      } else {
        console.log('✅ 테스트 데이터가 삭제되었습니다.');
      }
    }

  } catch (error) {
    console.error('❌ 테이블 테스트 중 오류 발생:', error);
  }
}

testAITable().then(() => {
  console.log('🏁 AI 사용량 테이블 테스트 완료');
  process.exit(0);
}).catch((error) => {
  console.error('❌ 스크립트 실행 중 오류:', error);
  process.exit(1);
});
