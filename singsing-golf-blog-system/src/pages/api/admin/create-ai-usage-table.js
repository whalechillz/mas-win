import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('❌ Supabase 환경 변수가 설정되지 않았습니다');
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

export default async function handler(req, res) {
  console.log('🗄️ AI 사용량 테이블 생성 API 요청:', req.method);

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('❌ Supabase 환경 변수가 설정되지 않았습니다');
    return res.status(500).json({ error: '서버 설정 오류' });
  }

  try {
    // AI 사용량 로그 테이블 생성
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS public.ai_usage_logs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        api_endpoint TEXT NOT NULL,
        model TEXT NOT NULL,
        input_tokens INTEGER DEFAULT 0,
        output_tokens INTEGER DEFAULT 0,
        total_tokens INTEGER DEFAULT 0,
        cost DECIMAL(10, 6) DEFAULT 0,
        improvement_type TEXT,
        content_type TEXT,
        user_agent TEXT,
        ip_address INET,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // 인덱스 생성
    const createIndexesSQL = [
      `CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_endpoint ON public.ai_usage_logs (api_endpoint);`,
      `CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_model ON public.ai_usage_logs (model);`,
      `CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_created_at ON public.ai_usage_logs (created_at DESC);`,
      `CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_cost ON public.ai_usage_logs (cost DESC);`
    ];

    // RLS 정책 설정
    const createPoliciesSQL = [
      `ALTER TABLE public.ai_usage_logs ENABLE ROW LEVEL SECURITY;`,
      `DROP POLICY IF EXISTS "Enable read access for all users" ON public.ai_usage_logs;`,
      `CREATE POLICY "Enable read access for all users" ON public.ai_usage_logs FOR SELECT USING (TRUE);`,
      `DROP POLICY IF EXISTS "Enable insert access for service role" ON public.ai_usage_logs;`,
      `CREATE POLICY "Enable insert access for service role" ON public.ai_usage_logs FOR INSERT WITH CHECK (TRUE);`
    ];

    // 통계 뷰 생성
    const createViewsSQL = [
      `CREATE OR REPLACE VIEW public.ai_usage_stats AS
       SELECT 
         api_endpoint,
         model,
         COUNT(*) as total_requests,
         SUM(total_tokens) as total_tokens,
         SUM(cost) as total_cost,
         AVG(cost) as avg_cost_per_request,
         DATE_TRUNC('day', created_at) as usage_date
       FROM public.ai_usage_logs
       GROUP BY api_endpoint, model, DATE_TRUNC('day', created_at)
       ORDER BY usage_date DESC;`,
      
      `CREATE OR REPLACE VIEW public.ai_usage_monthly_stats AS
       SELECT 
         api_endpoint,
         model,
         COUNT(*) as total_requests,
         SUM(total_tokens) as total_tokens,
         SUM(cost) as total_cost,
         AVG(cost) as avg_cost_per_request,
         DATE_TRUNC('month', created_at) as usage_month
       FROM public.ai_usage_logs
       GROUP BY api_endpoint, model, DATE_TRUNC('month', created_at)
       ORDER BY usage_month DESC;`
    ];

    console.log('🗄️ AI 사용량 테이블 생성 시작...');

    // 테이블 생성
    const { error: tableError } = await supabase.rpc('exec_sql', { sql: createTableSQL });
    if (tableError) {
      console.error('❌ 테이블 생성 에러:', tableError);
      return res.status(500).json({ error: '테이블 생성 실패', details: tableError.message });
    }

    // 인덱스 생성
    for (const indexSQL of createIndexesSQL) {
      const { error: indexError } = await supabase.rpc('exec_sql', { sql: indexSQL });
      if (indexError) {
        console.log('⚠️ 인덱스 생성 경고:', indexError.message);
      }
    }

    // RLS 정책 설정
    for (const policySQL of createPoliciesSQL) {
      const { error: policyError } = await supabase.rpc('exec_sql', { sql: policySQL });
      if (policyError) {
        console.log('⚠️ 정책 설정 경고:', policyError.message);
      }
    }

    // 뷰 생성
    for (const viewSQL of createViewsSQL) {
      const { error: viewError } = await supabase.rpc('exec_sql', { sql: viewSQL });
      if (viewError) {
        console.log('⚠️ 뷰 생성 경고:', viewError.message);
      }
    }

    console.log('✅ AI 사용량 테이블 생성 완료');

    // 테이블 존재 확인
    const { data: tables, error: checkError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'ai_usage_logs');

    if (checkError) {
      console.log('⚠️ 테이블 확인 경고:', checkError.message);
    }

    return res.status(200).json({ 
      success: true, 
      message: 'AI 사용량 테이블이 성공적으로 생성되었습니다.',
      tableExists: tables && tables.length > 0
    });

  } catch (error) {
    console.error('❌ AI 사용량 테이블 생성 API 오류:', error);
    return res.status(500).json({ 
      error: '서버 오류가 발생했습니다.', 
      details: error.message 
    });
  }
}
