require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkAITable() {
  try {
    console.log('🔍 AI 사용량 테이블 확인 시작...');
    console.log('Supabase URL:', supabaseUrl ? '설정됨' : '설정되지 않음');
    console.log('Service Key:', supabaseServiceKey ? '설정됨' : '설정되지 않음');

    // 테이블에서 데이터 조회 시도
    const { data, error } = await supabase
      .from('ai_usage_logs')
      .select('*')
      .limit(1);

    if (error) {
      console.log('❌ 에러 발생:', JSON.stringify(error, null, 2));
      
      if (error.code === 'PGRST116') {
        console.log('📋 테이블이 존재하지 않습니다. 다음 SQL을 Supabase 대시보드에서 실행하세요:');
        console.log(`
-- AI 사용량 로그 테이블 생성
CREATE TABLE IF NOT EXISTS public.ai_usage_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  api_endpoint TEXT NOT NULL,
  model TEXT NOT NULL,
  input_tokens INTEGER DEFAULT 0,
  output_tokens INTEGER DEFAULT 0,
  total_tokens INTEGER DEFAULT 0,
  cost DECIMAL(10, 6) DEFAULT 0,
  improvement_type TEXT,
  content_type TEXT,
  user_agent TEXT,
  ip_address INET,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_endpoint ON public.ai_usage_logs (api_endpoint);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_model ON public.ai_usage_logs (model);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_created_at ON public.ai_usage_logs (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_ai_usage_logs_cost ON public.ai_usage_logs (cost DESC);

-- RLS 정책 설정
ALTER TABLE public.ai_usage_logs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON public.ai_usage_logs
  FOR SELECT USING (TRUE);

CREATE POLICY "Enable insert access for service role" ON public.ai_usage_logs
  FOR INSERT WITH CHECK (TRUE);
        `);
      }
    } else {
      console.log('✅ 테이블이 존재하고 접근 가능합니다!');
      console.log('📊 조회된 데이터:', data);
    }

  } catch (error) {
    console.error('❌ 테이블 확인 중 오류 발생:', error);
  }
}

checkAITable().then(() => {
  console.log('🏁 AI 사용량 테이블 확인 완료');
  process.exit(0);
}).catch((error) => {
  console.error('❌ 스크립트 실행 중 오류:', error);
  process.exit(1);
});
