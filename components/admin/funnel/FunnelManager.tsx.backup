import { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, Legend } from 'recharts';

interface FunnelFile {
  name: string;
  path: string;
  size: number;
  createdDate: string;
  modifiedDate: string;
  version: string;
  status: 'live' | 'staging' | 'dev';
  url: string;
}

interface FunnelData {
  totalFiles: number;
  groupedFunnels: Record<string, FunnelFile[]>;
  lastUpdated: string;
}

interface GA4Data {
  activeUsers: string;
  pageViews: string;
  events: string;
  todayUsers: string;
  todayPageViews: string;
  todayEvents: string;
  monthlyUsers: string;
  monthlyPageViews: string;
  monthlyEvents: string;
  timestamp: string;
  campaign_id: string;
  status: string;
  propertyId: string;
  period: {
    today: string;
    monthStart: string;
    monthEnd: string;
  };
}

interface PerformanceData {
  liveA: {
    pageLoadTime: number;
    firstContentfulPaint: number;
    largestContentfulPaint: number;
    fileSize: number;
  };
  liveB: {
    pageLoadTime: number;
    firstContentfulPaint: number;
    largestContentfulPaint: number;
    fileSize: number;
  };
}

// 새로운 고급 데이터 인터페이스들
interface UserBehaviorData {
  sessionMetrics: {
    totalSessions: number;
    avgSessionDuration: number;
    bounceRate: number;
    pagesPerSession: number;
  };
  devicePerformance: Array<{
    device: string;
    users: number;
    pageViews: number;
    avgSessionDuration: number;
    bounceRate: number;
  }>;
  hourlyPerformance: Array<{
    hour: string;
    users: number;
    pageViews: number;
    sessions: number;
  }>;
  pagePerformance: Array<{
    page: string;
    pageViews: number;
    avgSessionDuration: number;
    bounceRate: number;
    exitRate: number;
  }>;
  eventAnalysis: Array<{
    event: string;
    count: number;
    users: number;
  }>;
  calculatedMetrics: {
    avgSessionDurationMinutes: number;
    engagementRate: number;
    conversionRate: number;
  };
  timestamp: string;
  period: string;
  status?: string;
  scrollDepthData?: {
    liveA?: {
      totalUsers: number;
      scrollDepth: {
        '25%': number;
        '50%': number;
        '75%': number;
        '100%': number;
      };
    };
    liveB?: {
      totalUsers: number;
      scrollDepth: {
        '25%': number;
        '50%': number;
        '75%': number;
        '100%': number;
      };
    };
  };
}

interface AdvancedPerformanceData {
  pagePerformance: Array<{
    page: string;
    pageViews: number;
    avgSessionDuration: number;
  }>;
  devicePerformance: Array<{
    device: string;
    pageViews: number;
    avgSessionDuration: number;
    bounceRate: number;
  }>;
  hourlyPerformance: Array<{
    hour: string;
    pageViews: number;
    sessions: number;
  }>;
  overallMetrics: {
    totalPageViews: number;
    avgSessionDurationMinutes: number;
    avgBounceRate: number;
    performanceScore: number;
  };
  abTestPerformance: {
    versionA: {
      pageLoadTime: number;
      firstContentfulPaint: number;
      largestContentfulPaint: number;
      fileSize: number;
      performanceScore: number;
    };
    versionB: {
      pageLoadTime: number;
      firstContentfulPaint: number;
      largestContentfulPaint: number;
      fileSize: number;
      performanceScore: number;
    };
  };
  timestamp: string;
  period: string;
  status?: string;
}

interface MonthlyData {
  month: string;
  year: number;
  users: number;
  pageViews: number;
  events: number;
  tagStatus: string;
  workingDays: number;
  totalDays: number;
  dailyData: Array<{
    date: string;
    users: number;
    pageViews: number;
    events: number;
  }>;
}

interface FunnelTrackingData {
  page: string;
  firstDataCollection: string;
  lastDataCollection: string;
  totalDays: number;
  totalPageViews: number;
  hasData: boolean;
}

interface FunnelDailyViewsData {
  page: string;
  dailyData: Array<{
    date: string;
    pageViews: number;
  }>;
  totalDays: number;
  totalPageViews: number;
  firstDataDate: string | null;
  lastDataDate: string | null;
}

export function FunnelManager() {
  const [funnelData, setFunnelData] = useState<FunnelData | null>(null);
  const [ga4Data, setGa4Data] = useState<GA4Data | null>(null);
  const [performanceData, setPerformanceData] = useState<PerformanceData | null>(null);
  const [userBehaviorData, setUserBehaviorData] = useState<UserBehaviorData | null>(null);
  const [advancedPerformanceData, setAdvancedPerformanceData] = useState<AdvancedPerformanceData | null>(null);
  const [monthlyData, setMonthlyData] = useState<MonthlyData | null>(null);
  const [funnelTrackingData, setFunnelTrackingData] = useState<FunnelTrackingData[]>([]);
  const [funnelDailyViewsData, setFunnelDailyViewsData] = useState<FunnelDailyViewsData[]>([]);
  const [funnelUserBehaviorData, setFunnelUserBehaviorData] = useState<{[key: string]: any}>({});
  const [topPages202507, setTopPages202507] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedMonth, setSelectedMonth] = useState<string>('2025-09');
  const [selectedVersion, setSelectedVersion] = useState<string>('live-a');

  useEffect(() => {
    fetchFunnelData();
    fetchGA4Data();
    fetchPerformanceData();
    fetchUserBehaviorData();
    fetchAdvancedPerformanceData();
    fetchMonthlyData();
    fetchFunnelTrackingData();
    fetchFunnelDailyViewsData();
    fetchFunnelUserBehaviorData();
    fetchTopPages202507();
  }, []);

  const fetchFunnelData = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/funnel-management');
      const data = await response.json();
      
      if (data.success) {
        setFunnelData(data.data);
        // 가장 최근 월을 기본 선택
        const months = Object.keys(data.data.groupedFunnels);
        if (months.length > 0) {
          setSelectedMonth(months[months.length - 1]);
        }
      } else {
        setError(data.error || '데이터 로드 실패');
      }
    } catch (err) {
      setError('퍼널 데이터 로드 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  const fetchGA4Data = async () => {
    try {
      const response = await fetch('/api/ga4-realtime');
      const data = await response.json();
      setGa4Data(data);
    } catch (err) {
      console.error('GA4 데이터 로드 실패:', err);
    }
  };

  const fetchPerformanceData = async () => {
    try {
      // 실제 성능 데이터는 API에서 가져와야 하지만, 여기서는 모의 데이터 사용
      const mockData: PerformanceData = {
        liveA: {
          pageLoadTime: 1.2,
          firstContentfulPaint: 0.8,
          largestContentfulPaint: 1.5,
          fileSize: 245760 // 240KB
        },
        liveB: {
          pageLoadTime: 1.1,
          firstContentfulPaint: 0.7,
          largestContentfulPaint: 1.3,
          fileSize: 235520 // 230KB
        }
      };
      setPerformanceData(mockData);
    } catch (err) {
      console.error('성능 데이터 로드 실패:', err);
    }
  };

  const fetchUserBehaviorData = async () => {
    try {
      const response = await fetch('/api/ga4-user-behavior-filtered');
      const data = await response.json();
      setUserBehaviorData(data);
    } catch (err) {
      console.error('사용자 행동 데이터 로드 실패:', err);
    }
  };

  const fetchAdvancedPerformanceData = async () => {
    try {
      const response = await fetch('/api/performance-metrics-filtered');
      const data = await response.json();
      setAdvancedPerformanceData(data);
    } catch (err) {
      console.error('고급 성능 데이터 로드 실패:', err);
    }
  };

  const fetchMonthlyData = async () => {
    try {
      const response = await fetch('/api/ga4-monthly');
      const data = await response.json();
      setMonthlyData(data);
    } catch (err) {
      console.error('월별 데이터 로드 실패:', err);
    }
  };

  const fetchFunnelTrackingData = async () => {
    try {
      const response = await fetch('/api/page-tracking-dates');
      const data = await response.json();
      // 퍼널 페이지들만 필터링
      const funnelPages = data.pages.filter((page: any) => 
        page.page.includes('funnel') || page.page.includes('25-08') || page.page.includes('25-07')
      );
      setFunnelTrackingData(funnelPages);
    } catch (err) {
      console.error('퍼널 추적 데이터 로드 실패:', err);
    }
  };

  const fetchFunnelDailyViewsData = async () => {
    try {
      const response = await fetch('/api/funnel-daily-views');
      const data = await response.json();
      // 상위 5개 퍼널만 설정 (종합 퍼널 제외)
      if (data.top5Funnels) {
        setFunnelDailyViewsData(data.top5Funnels);
      } else {
        setFunnelDailyViewsData(data.funnelPages || []);
      }
    } catch (err) {
      console.error('퍼널 일별 뷰 데이터 로드 실패:', err);
    }
  };

  const fetchFunnelUserBehaviorData = async () => {
    try {
      // 2025-09, 2025-08, 2025-07 퍼널의 개별 사용자 행동 데이터 가져오기
      const [live09Response, liveAResponse, liveBResponse, live07Response] = await Promise.all([
        fetch('/api/ga4-funnel-user-behavior?path=/versions/funnel-2025-09-live.html&month=2025-09'),
        fetch('/api/ga4-funnel-user-behavior?path=funnel-2025-08-live-a&month=2025-08'),
        fetch('/api/ga4-funnel-user-behavior?path=funnel-2025-08-live-b&month=2025-08'),
        fetch('/api/ga4-funnel-user-behavior?path=funnel-2025-07-live&month=2025-07')
      ]);
      
      const live09Data = await live09Response.json();
      const liveAData = await liveAResponse.json();
      const liveBData = await liveBResponse.json();
      const live07Data = await live07Response.json();
      
      setFunnelUserBehaviorData({
        '/versions/funnel-2025-09-live.html': live09Data,
        'funnel-2025-08-live-a': liveAData,
        'funnel-2025-08-live-b': liveBData,
        'funnel-2025-07-live': live07Data
      });
    } catch (err) {
      console.error('퍼널별 사용자 행동 데이터 로드 실패:', err);
    }
  };

  const fetchTopPages202507 = async () => {
    try {
      const response = await fetch('/api/ga4-top-pages-2025-07');
      const data = await response.json();
      setTopPages202507(data.pages || []);
    } catch (err) {
      console.error('2025-07 상위 페이지 로드 실패:', err);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'live': return 'bg-green-100 text-green-800';
      case 'staging': return 'bg-yellow-100 text-yellow-800';
      case 'dev': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString: string) => {
    // GA4 데이터 형식 (YYYYMMDD) 처리
    if (dateString && dateString.length === 8 && /^\d{8}$/.test(dateString)) {
      const year = dateString.substring(0, 4);
      const month = dateString.substring(4, 6);
      const day = dateString.substring(6, 8);
      return `${year}년 ${month}월 ${day}일`;
    }
    
    // 일반 날짜 형식 처리
    return new Date(dateString).toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">퍼널 파일을 스캔하는 중...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
        <strong className="font-bold">오류:</strong>
        <span className="block sm:inline"> {error}</span>
        <button 
          onClick={fetchFunnelData}
          className="ml-4 bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
        >
          다시 시도
        </button>
      </div>
    );
  }

  if (!funnelData) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-600">퍼널 데이터를 찾을 수 없습니다.</p>
      </div>
    );
  }

  const selectedFunnels = selectedMonth ? funnelData.groupedFunnels[selectedMonth] || [] : [];

  return (
    <div className="space-y-6">
      {/* 간단한 버전 - 일단 컴파일되는 최소 버전 */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">퍼널 관리</h2>
          <p className="text-gray-600">
            총 {funnelData.totalFiles}개의 퍼널 파일
          </p>
        </div>
      </div>

      {/* 월별 선택 탭 */}
      <div className="bg-white rounded-lg shadow">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6" aria-label="Tabs">
            {Object.keys(funnelData.groupedFunnels).map((month) => (
              <button
                key={month}
                onClick={() => setSelectedMonth(month)}
                className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                  selectedMonth === month
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {month}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* 선택된 월의 퍼널 목록 */}
      {selectedMonth && (
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">{selectedMonth} 퍼널 목록</h3>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {selectedFunnels.length > 0 ? (
              selectedFunnels.map((funnel) => (
                <div 
                  key={funnel.name}
                  className={`border-2 rounded-lg p-6 ${
                    funnel.status === 'live' 
                      ? 'border-blue-200 bg-blue-50' 
                      : 'border-green-200 bg-green-50'
                  }`}
                >
                  <h4 className="text-xl font-bold text-gray-900">{funnel.name}</h4>
                  <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium mt-2 ${
                    funnel.status === 'live'
                      ? 'bg-blue-100 text-blue-800'
                      : 'bg-green-100 text-green-800'
                  }`}>
                    {funnel.status}
                  </span>
                </div>
              ))
            ) : (
              <div className="col-span-2 text-center py-8 text-gray-500">
                {selectedMonth}에 해당하는 퍼널이 없습니다.
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default FunnelManager;